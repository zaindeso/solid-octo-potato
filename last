An h1 header

Muhammad
============

Paragraphs are separated by a blank line.

Sonarqube incorporation with Azure DevOps permits you to keep up with code quality and security in your Azure DevOps archives. It is viable with both Azure DevOps Server and Azure DevOps Services., The Sonar Scanner for Azure DevOps makes it simple to coordinate examination into you fabricate pipeline. The expansion permits the examination of all dialects upheld by SonarQube, SonarQube distributes Quality Gate and code metric outcomes solidly in your investigation outline. You're continuously getting the right information, brilliantly and perfectly positioned. SonarQube is an open-source platform used for continuous inspection of code quality. It per- forms static analysis of code, in order to detect bugs, code smells, and security vulnerabilities. SonarQube works with a wide range of programming languages and integrates with Maven, Ant, Gradle, MS Build and many CI tools. In this lab we will look at running SonarQube in Docker, integrating it with Jenkins, and using Sonar Lint to enable early quality feedback within an IDE. SonarQube can also be run in an EC2 instance, but requires at least 3GB of RAM, which means a t2 medium or larger. As this is beyond the free tier, you are not required to implement it for this module.
2nd paragraph. Italic, *bold*, and `monospace`. Itemized lists
look like:

  * this one
  * that one
  * the other one
Sonar Cloud is a cloud-based code investigation administration intended to identify code quality issues in 25 different programming dialects, persistently guaranteeing the viability, dependability and security of your code. Sonar Cloud involves best in class procedures in static code investigation to track down issues, and possible issues, in the code that you and your group compose. Static investigation is called static since it doesn't depend on really running the code (examination of running code is called dynamic investigation). Therefore, Sonar Cloud offers an extra layer of confirmation, not the same as mechanized testing and human code-audit. Early location of issues guarantees that less issues break through to the later phases of the interaction and eventually assists with expanding the general nature of your creation code.
Note that --- not considering the asterisk --- the actual text
content starts at 4-columns in.

> Block quotes are
> written like so.
>
> They can span multiple paragraphs,
> if you like.

Use 3 dashes for an em-dash. Use 2 dashes for ranges (ex., "it's all
in chapters 12--14"). Three dots ... will be converted to an ellipsis.
Unicode is supported. â˜º



An h2 header
------------

Here's a numbered list:

 1. first item
 2. second item
 3. third item

Note again how the actual text starts at 4 columns in (4 characters
from the left side). Here's a code sample:

    # Let me re-iterate ...
    for i in 1 .. 10 { do-something(i) }

As you probably guessed, indented 4 spaces. By the way, instead of
indenting the block, you can use delimited blocks, if you like:

~
define foobar() {
    print "Welcome to flavor country!";
}
~

(which makes copying & pasting easier). You can optionally mark the
delimited block for Pandoc to syntax highlight it:

~~~python
import time
# Quick, count to ten!
for i in range(10):
    # (but not too quick)
    time.sleep(0.5)
    print(i)
~



### An h3 header ###

Now a nested list:

 1. First, get these ingredients:

      * carrots
      * celery
      * lentils

 2. Boil some water.

 3. Dump everything in the pot and follow
    this algorithm:

        find wooden spoon
        uncover pot
        stir
        cover pot
        balance wooden spoon precariously on pot handle
        wait 10 minutes
        goto first step (or shut off burner when done)

    Do not bump wooden spoon or it will fall.

Notice again how text always lines up on 4-space indents (including
that last line which continues item 3 above).

Here's a link to [a website](http://foo.bar), to a [local
doc](local-doc.html), and to a [section heading in the current
doc](#an-h2-header). Here's a footnote [^1].

[^1]: Some footnote text.

Tables can look like this:

Name           Size  Material      Color
------------- -----  ------------  ------------
All Business      9  leather       brown
Roundabout       10  hemp canvas   natural
Cinderella       11  glass         transparent

Table: Shoes sizes, materials, and colors.

(The above is the caption for the table.) Pandoc also supports
multi-line tables:

--------  -----------------------
Keyword   Text
--------  -----------------------
red       Sunsets, apples, and
          other red or reddish
          things.

green     Leaves, grass, frogs
          and other things it's
          not easy being.
--------  -----------------------

A horizontal rule follows.

*

Here's a definition list:

apples
  : Good for making applesauce.

oranges
  : Citrus!

tomatoes
  : There's no "e" in tomatoe.

Again, text is indented 4 spaces. (Put a blank line between each
term and  its definition to spread things out more.)

Here's a "line block" (note how whitespace is honored):

| Line one
|   Line too
| Line tree

and images can be specified like so:

![example image](images/example-image.jpg "An exemplary image")

Inline math equation: $\omega = d\phi / dt$. Display
math should get its own line like so:

$$I = \int \rho R^{2} dV$$

And note that you can backslash-escape any punctuation characters
which you wish to be displayed literally, ex.: \`foo\`, \bar\, etc.
